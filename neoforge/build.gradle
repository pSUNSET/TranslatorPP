plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
    maven {
        name = "Shedaniel"
        url = "https://maven.shedaniel.me/"
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$architectury_api_version"

    modCompileOnlyApi "me.shedaniel.cloth:cloth-config-neoforge:$cloth_config_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand([
                mod_id: mod_id,
                version: version,
                neoforge_version_range: neoforge_version_range,
                minecraft_version_neoforge_range: minecraft_version_neoforge_range,
                architectury_api_version_neoforge_range: architectury_api_version_neoforge_range,
        ])
    }
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "Project SUNSET",
                'Specification-Version'   : "1",
                'Implementation-Title'    : this.project.name,
                'Implementation-Version'  : this.project.jar.archiveVersion,
                'Implementation-Vendor'   : "Project SUNSET",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
