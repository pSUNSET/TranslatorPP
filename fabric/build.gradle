plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases/"
    }
    maven {
        name = "Shedaniel"
        url = "https://maven.shedaniel.me/"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_api_version"

    modImplementation "dev.architectury:architectury-fabric:$architectury_api_version"

    modApi "com.terraformersmc:modmenu:$modmenu_version"
    modCompileOnlyApi("me.shedaniel.cloth:cloth-config-fabric:$cloth_config_version") { exclude(group: "net.fabricmc.fabric-api") }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'group', project.group

    filesMatching('fabric.mod.json') {
        expand(
                mod_id: mod_id,
                version: project.version,
                group: project.group,
                minecraft_version_fabric_range: minecraft_version_fabric_range,
                architectury_api_version_fabric_range: architectury_api_version_fabric_range,
                fabric_loader_version_range: fabric_loader_version_range,
                fabric_api_version_range: fabric_api_version_range
        )
    }
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "Project SUNSET",
                'Specification-Version'   : "1",
                'Implementation-Title'    : this.project.name,
                'Implementation-Version'  : this.project.jar.archiveVersion,
                'Implementation-Vendor'   : "Project SUNSET",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
